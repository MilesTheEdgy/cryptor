{"version":3,"sources":["hooks/useFetch.js","components/views/decrypt/GetMessageSection.js","components/views/decrypt/DecryptMessageSection.js","components/views/decrypt/Decrypt.js","components/views/encrypt/PrivateKeyGen.js","components/views/encrypt/Encrypt.js","components/views/message_log/MessageLog.js","components/helpers/loading/Loading.js","App.js","store.js","index.js"],"names":["useFetch","url","undefined","onEvent","dispatch","useDispatch","callFetch","useCallback","a","callbackURL","fetchOptions","type","fetch","res","json","data","ok","console","error","useState","response","setResponse","fetchIndex","setFetchIndex","refetch","useEffect","fetchData","GetMessageSection","privateKey","setPrivateKey","setEncryptedMessage","messageID","setMessageID","fetchWith","identifier","trim","status","encryptedMessage","handleFetch","match","className","htmlFor","value","placeholder","onChange","e","target","id","onClick","DecryptMessageSection","handleDecrypt","method","headers","body","JSON","stringify","rows","decryptedMessage","readOnly","Decrypt","copyToClipBoard","navigator","clipboard","writeText","PrivateKeyGen","handlePrivateKey","EncryptMessageSection","refetchMessages","originalMessage","setOriginalMessage","encryptMessageHandler","authorization","document","cookie","slice","Encrypt","MessageLog","messages","scope","map","message","i","date","time","Loading","App","loading","useSelector","state","initialState","store","createStore","action","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.41977a34.chunk.js","sourcesContent":["import { useEffect, useCallback, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\n/**\n * @hook useFetch\n * @param {string} url the URL to fetch from\n * @param {boolean} onEvent define how to fetch the requested url, once component mounts, or once an event occurs\n * @returns {object} if onEvent is true, returns a fetch async callback function, if onEvent is false, returns data from useEffect\n * fetch function\n */\nexport function useFetch({ url = undefined, onEvent = false } = {}) {\n    // Define dispatch hook function to be used with toggling loading on and off\n    const dispatch = useDispatch();\n\n    /**\n     * @summary define a callback function to be returned if onEvent is true\n     * @param {string} callbackURL takes the url to fetch from, default value is useFetch\n     * url.\n     * @returns {object} fetched response object, with data and ok properties.\n     */\n    const callFetch = useCallback(\n        async ({ callbackURL = url, fetchOptions = {} } = {}) => {\n            if (!callbackURL) return;\n            dispatch({ type: 'SET_LOADING_ON' });\n            try {\n                const res = await fetch(callbackURL, fetchOptions);\n                const data = await res.json();\n                return { ok: true, data };\n            } catch (error) {\n                console.error(error);\n                return { ok: false, data: error };\n            } finally {\n                dispatch({ type: 'SET_LOADING_OFF' });\n            }\n        },\n        [url, dispatch]\n    );\n\n    // The below state values and functions mostly apply for useEffect only.\n\n    // define response from fetch\n    const [response, setResponse] = useState({});\n    // Define a fetch index used for refetching.\n    const [fetchIndex, setFetchIndex] = useState(0);\n    const refetch = () => {\n        setFetchIndex(fetchIndex + 1);\n    };\n    // define a fetch function once component mounts if onEvent is false\n    useEffect(() => {\n        if (onEvent) return;\n        const fetchData = async () => {\n            if (!url) return;\n            dispatch({ type: 'SET_LOADING_ON' });\n            try {\n                const res = await fetch(url);\n                const data = await res.json();\n                setResponse({ ok: true, data });\n            } catch (error) {\n                console.error(error);\n                setResponse({ ok: false, data: error });\n            } finally {\n                dispatch({ type: 'SET_LOADING_OFF' });\n            }\n        };\n        fetchData();\n    }, [url, onEvent, fetchIndex, dispatch]);\n    // if onEvent is true, return the callback fetch function\n    if (onEvent) return callFetch;\n    // else return the response from useEffect function\n    return { response, refetch };\n}\n","import { useState } from 'react';\nimport { useFetch } from '../../../hooks/useFetch';\n\n/**\n * @component\n * @param {string} privateKey the private key used to fetch the encrypted message\n * @param {function} setPrivateKey react useState hook that set's the private key\n * @param {function} setEncryptedMessage react useState hook that set's the encrypted message\n * @summary This component fetches the encrypted message using either the message ID or the\n * private key. The private key and encrypted message are neccessary in it's parent component\n * since it will be passed as a prop to it's sibling 'DecryptMessageSection' component, that is\n * why they are passed as a prop here.\n */\nexport default function GetMessageSection({\n    privateKey,\n    setPrivateKey,\n    setEncryptedMessage,\n}) {\n    const callFetch = useFetch({ onEvent: true });\n    const [messageID, setMessageID] = useState('');\n\n    const handleMessageID = (e) => setMessageID(e.target.value);\n    const handlePrivateKey = (e) => setPrivateKey(e.target.value);\n\n    /**\n     * @async @param {string} identifier either the messageID or the private key.\n     * @summary helper function for fetching the encrypted message using the messageID or the private key\n     * @returns {void} set's state for encryptedMessage on success, returns a status regarding\n     * it's error on failure.\n     */\n    const fetchWith = async (identifier) => {\n        // If field is empty, return empty_field status\n        if (identifier.trim() === '') {\n            setEncryptedMessage('');\n            return { status: 'empty_field' };\n        }\n        const response = await callFetch({\n            callbackURL: `/api/messages/${identifier}`,\n        });\n        // If JSON string does not match the below string, setState the encrypted\n        // message and return.\n        if (response.data !== 'Requested message does not exist in database') {\n            setEncryptedMessage(response.data.encryptedMessage);\n            return { status: 'found' };\n        } else {\n            setEncryptedMessage('');\n            return { status: 'not_found' };\n        }\n    };\n\n    /**\n     * @async\n     * @summary handles fetching encrypted message once called through the onClick handler.\n     * @returns {void} set's state for encryptedMessage with an error string on failure.\n     */\n    const handleFetch = async () => {\n        // Attempt to fetch with message ID\n        const msgIdResponse = await fetchWith(messageID);\n        // If fetch is a success, return out of this function\n        if (msgIdResponse.status.match(/^(empty_field|not_found)$/) === null)\n            return;\n        // Else attempt to fetch with private key\n        const pkResponse = await fetchWith(privateKey);\n        // If fetch is a failure, return message not found field\n        if (pkResponse.status.match(/^(empty_field|not_found)$/) !== null)\n            return setEncryptedMessage(\n                'MESSAGE NOT FOUND please check your message ID or private key'\n            );\n    };\n\n    return (\n        <>\n            <div className='mb-4 row'>\n                <label\n                    htmlFor='inputMessageID'\n                    className='col-sm-2 col-form-label'\n                >\n                    Message ID\n                </label>\n                <div className='col-sm-10'>\n                    <input\n                        value={messageID}\n                        placeholder='Your message ID'\n                        onChange={handleMessageID}\n                        className='form-control'\n                        id='inputMessageID'\n                    />\n                </div>\n            </div>\n            <div className='mb-4 row'>\n                <label\n                    htmlFor='inputPrivateKey'\n                    className='col-sm-2 col-form-label'\n                >\n                    Private Key\n                </label>\n                <div className='col-sm-10'>\n                    <input\n                        className='form-control'\n                        id='inputPrivateKey'\n                        value={privateKey}\n                        placeholder='Your private key'\n                        onChange={handlePrivateKey}\n                    />\n                </div>\n            </div>\n            <div className='mb-4 row'>\n                <div className='d-grid gap-2'>\n                    <button\n                        type='button'\n                        className='btn btn-info'\n                        onClick={handleFetch}\n                    >\n                        Retrieve Message\n                    </button>\n                </div>\n            </div>\n        </>\n    );\n}\n","import { useState } from 'react';\nimport { useFetch } from '../../../hooks/useFetch';\n\n/**\n * @component DecryptMessageSection\n * @param {string} encryptedMessage the encrypted message to be decrypted\n * @param {function} setEncryptedMessage the setState hook that set's the encrypted message field\n * @param {string} privateKey the private key to decrypt the message with\n * @summary Decrypts an encrypted message using it's private key by sending a patch\n * request to the server with the key as its request's body.\n */\nexport default function DecryptMessageSection({\n    encryptedMessage,\n    setEncryptedMessage,\n    privateKey,\n}) {\n    // Define the fetch callback function\n    const callFetch = useFetch({ onEvent: true });\n    // Define state for setting the response received from fetch callback function\n    const [response, setResponse] = useState({});\n    /**\n     * @async\n     * @summary Handles the message decryption after it get's called with onClick handler.\n     * sends a request to the server to decrypt the message using it's private key and the encrypted message in it's request\n     * body. Set's the response state and response itself is used to render the decrypted message text below.\n     */\n    const handleDecrypt = async () => {\n        const response = await callFetch({\n            callbackURL: '/api/messages/decrypt',\n            fetchOptions: {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    privateKey,\n                    encryptedMessage,\n                }),\n            },\n        });\n        setResponse(response);\n    };\n\n    const encryptedMessageHandler = (e) => setEncryptedMessage(e.target.value);\n\n    return (\n        <>\n            <div className='mb-4 row'>\n                <label\n                    htmlFor='inputEncryptedMessage'\n                    className='col-sm-2 col-form-label'\n                >\n                    Encrypted Message\n                </label>\n                <div className='col-sm-10'>\n                    <textarea\n                        id='inputEncryptedMessage'\n                        className='form-control'\n                        rows='5'\n                        onChange={encryptedMessageHandler}\n                        value={encryptedMessage}\n                        placeholder='Your encrypted message'\n                    ></textarea>{' '}\n                </div>\n            </div>\n            <div className='mb-4 row'>\n                <div className='d-grid gap-2'>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        onClick={handleDecrypt}\n                    >\n                        Decrypt Message\n                    </button>\n                </div>\n            </div>\n            <div className='mb-4 row'>\n                <label className='col-sm-2 col-form-label'>\n                    Decrypted Message\n                </label>\n                <div className='col-sm-10'>\n                    <textarea\n                        className='form-control'\n                        rows='5'\n                        placeholder='Your decrypted message'\n                        value={response.data && response.data.decryptedMessage}\n                        readOnly\n                    ></textarea>{' '}\n                </div>\n            </div>\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport GetMessageSection from './GetMessageSection';\nimport DecryptMessageSection from './DecryptMessageSection';\n\n/**\n * @component\n * @summary Decrypt section\n */\nexport default function Decrypt() {\n    const [encryptedMessage, setEncryptedMessage] = useState('');\n    const [privateKey, setPrivateKey] = useState('');\n\n    return (\n        <div>\n            <h1 className='display-6 mb-5'>Decrypt my message</h1>\n            <GetMessageSection\n                setEncryptedMessage={setEncryptedMessage}\n                privateKey={privateKey}\n                setPrivateKey={setPrivateKey}\n            />\n            <DecryptMessageSection\n                encryptedMessage={encryptedMessage}\n                setEncryptedMessage={setEncryptedMessage}\n                privateKey={privateKey}\n            />\n        </div>\n    );\n}\n","import { useFetch } from '../../../hooks/useFetch';\n/**\n * @async @function copyToClipboard\n * @summary Copies data to the clipboard\n * @param {*} data data to be copied\n */\nconst copyToClipBoard = async (data) => {\n    await navigator.clipboard.writeText(data);\n};\n\n/**\n * @component\n * @summary Private Key generator field\n * @param {object} pkResponse the private key response object containing the private key\n * @param {function} fetchPrivateKey callback function to fetch a private key\n */\nexport default function PrivateKeyGen({ privateKey, setPrivateKey }) {\n    // define the fetch callback function\n    const callFetch = useFetch({ onEvent: true });\n\n    // define the privatekey handler\n    const handlePrivateKey = async () => {\n        const response = await callFetch({ callbackURL: '/api/generate-key' });\n        setPrivateKey(response.data);\n    };\n\n    return (\n        <div className='mb-4 row'>\n            <label className='col-sm-2 col-form-label'>Private Key</label>\n            <div className='col-lg-7'>\n                <input\n                    className='form-control'\n                    value={privateKey}\n                    placeholder='Generate a private key for encryption'\n                    readOnly\n                />\n            </div>\n            <div className='col-lg-1'>\n                <button\n                    type='button'\n                    className='btn btn-outline-primary'\n                    onClick={() => copyToClipBoard(privateKey)}\n                >\n                    <i className='far fa-clipboard'></i>\n                </button>\n            </div>\n            <div className='col-lg-2'>\n                <div className='d-grid gap-2'>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={handlePrivateKey}\n                    >\n                        Generate\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport { useFetch } from '../../../hooks/useFetch';\nimport PrivateKeyGen from './PrivateKeyGen';\n\nexport function EncryptMessageSection({ privateKey, refetchMessages }) {\n    const [originalMessage, setOriginalMessage] = useState('');\n    const [encryptedMessage, setEncryptedMessage] = useState('');\n    const callFetch = useFetch({ onEvent: true });\n\n    const originalMessageHandler = (e) => setOriginalMessage(e.target.value);\n    const encryptMessageHandler = async () => {\n        const response = await callFetch({\n            callbackURL: '/api/messages',\n            fetchOptions: {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    authorization: `Bearer ${document.cookie.slice(11)} `,\n                },\n                body: JSON.stringify({\n                    originalMessage,\n                    privateKey,\n                }),\n            },\n        });\n        setEncryptedMessage(response.data.encryptedMessage);\n        refetchMessages();\n    };\n\n    return (\n        <>\n            <div className='mb-4 row'>\n                <label\n                    htmlFor='inputMessage'\n                    className='col-sm-2 col-form-label'\n                    value={originalMessage}\n                >\n                    Your message\n                </label>\n                <div className='col-sm-10'>\n                    <input\n                        className='form-control'\n                        id='inputMessage'\n                        onChange={originalMessageHandler}\n                    />\n                </div>\n            </div>\n            <div className='mb-4 row'>\n                <div className='d-grid gap-2'>\n                    <button\n                        type='button'\n                        className='btn btn-success'\n                        onClick={encryptMessageHandler}\n                    >\n                        Submit / Encrypt\n                    </button>\n                </div>\n            </div>\n            <div className='mb-4 row'>\n                <label className='col-sm-2 col-form-label'>\n                    Encrypted Message\n                </label>\n                <div className='col-sm-10'>\n                    <textarea\n                        className='form-control'\n                        rows='5'\n                        readOnly\n                        placeholder='Your message after submitting the encryption request...'\n                        value={encryptedMessage}\n                    ></textarea>{' '}\n                </div>\n            </div>\n        </>\n    );\n}\n\n/**\n * @component\n * @summary Encryption section\n */\nexport default function Encrypt({ refetchMessages }) {\n    const [privateKey, setPrivateKey] = useState('');\n\n    return (\n        <div>\n            <h1 className='display-6 mb-5'>Encrypt my message</h1>\n            <PrivateKeyGen\n                privateKey={privateKey}\n                setPrivateKey={setPrivateKey}\n            />\n            <EncryptMessageSection\n                privateKey={privateKey}\n                refetchMessages={refetchMessages}\n            />\n        </div>\n    );\n}\n","export default function MessageLog({ messages }) {\n    return (\n        <div className='table-responsive'>\n            <h1 className='display-6 mb-5'>Messages Log</h1>\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th scope='col'>#</th>\n                        <th scope='col'>ID</th>\n                        <th scope='col'>Original Message</th>\n                        <th scope='col'>Encrypted Message</th>\n                        <th scope='col'>Private Key</th>\n                        <th scope='col'>Date</th>\n                        <th scope='col'>Time</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {messages.data &&\n                        messages.data.map((message, i) => {\n                            return (\n                                <tr key={message.messageID}>\n                                    <th scope='row'>{i + 1}</th>\n                                    <td>{message.messageID}</td>\n                                    <td>{message.originalMessage}</td>\n                                    <td>{message.encryptedMessage}</td>\n                                    <td>{message.privateKey}</td>\n                                    <td>{message.date}</td>\n                                    <td>{message.time}</td>\n                                </tr>\n                            );\n                        })}\n                </tbody>\n            </table>\n        </div>\n    );\n}\n","import './loading.css';\n\nfunction Loading() {\n    return <div className='loading'></div>;\n}\n\nexport default Loading;\n","import { useSelector } from 'react-redux';\nimport { useFetch } from './hooks/useFetch';\nimport Decrypt from './components/views/decrypt/Decrypt';\nimport Encrypt from './components/views/encrypt/Encrypt';\nimport MessageLog from './components/views/message_log/MessageLog';\nimport Loading from './components/helpers/loading/Loading';\n\nexport default function App() {\n    const loading = useSelector((state) => state.loading);\n    // Fetch all the existing messages.\n    const { response, refetch: refetchMessages } = useFetch({\n        url: '/api/messages',\n    });\n    return (\n        <div className='container-fluid'>\n            {loading && <Loading />}\n            <div className='row justify-content-around mb-5'>\n                <div className='col-lg-5'>\n                    <Encrypt refetchMessages={refetchMessages} />\n                </div>\n                <div className='col-lg-5'>\n                    <Decrypt />\n                </div>\n            </div>\n            <div className='row justify-content-center'>\n                <div className='col-lg-11'>\n                    <MessageLog messages={response} />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { createStore } from 'redux';\n\nconst initialState = {\n    loading: false,\n};\n\n/**\n * @function reducer Used to toggle loading on and off globally in useFetch hook.\n */\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_LOADING_ON':\n            return {\n                ...state,\n                loading: true,\n            };\n        case 'SET_LOADING_OFF':\n            return {\n                ...state,\n                loading: false,\n            };\n        default:\n            return state;\n    }\n};\n\nexport const store = createStore(reducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}