{"version":3,"sources":["hooks/useFetch.js","components/views/decrypt/GetMessageSection.js","components/views/decrypt/DecryptMessageSection.js","components/views/decrypt/Decrypt.js","components/views/encrypt/PrivateKeyGen.js","components/views/encrypt/Encrypt.js","components/views/message_log/MessageLog.js","components/helpers/loading/Loading.js","App.js","store.js","index.js"],"names":["useFetch","url","undefined","onEvent","dispatch","useDispatch","callFetch","useCallback","a","callbackURL","fetchOptions","type","fetch","res","json","data","ok","console","error","useState","response","setResponse","fetchIndex","setFetchIndex","refetch","useEffect","fetchData","GetMessageSection","privateKey","setPrivateKey","setEncryptedMessage","messageID","setMessageID","fetchWith","identifier","trim","status","encryptedMessage","handleFetch","match","className","htmlFor","value","placeholder","onChange","e","target","id","onClick","DecryptMessageSection","handleDecrypt","method","headers","body","JSON","stringify","rows","decryptedMessage","readOnly","Decrypt","copyToClipBoard","navigator","clipboard","writeText","PrivateKeyGen","handlePrivateKey","EncryptMessageSection","refetchMessages","originalMessage","setOriginalMessage","encryptMessageHandler","authorization","document","cookie","slice","Encrypt","MessageLog","messages","scope","map","message","i","date","time","Loading","App","loading","useSelector","state","initialState","store","createStore","action","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7a0aaa04.chunk.js","sourcesContent":["import { useEffect, useCallback, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n/**\r\n * @hook useFetch\r\n * @param {string} url the URL to fetch from\r\n * @param {boolean} onEvent define how to fetch the requested url, once component mounts, or once an event occurs\r\n * @returns {object} if onEvent is true, returns a fetch async callback function, if onEvent is false, returns data from useEffect\r\n * fetch function\r\n */\r\nexport function useFetch({ url = undefined, onEvent = false } = {}) {\r\n    // Define dispatch hook function to be used with toggling loading on and off\r\n    const dispatch = useDispatch()\r\n\r\n    /**\r\n     * @summary define a callback function to be returned if onEvent is true\r\n     * @param {string} callbackURL takes the url to fetch from, default value is useFetch\r\n     * url.\r\n     * @returns {object} fetched response object, with data and ok properties.\r\n     */\r\n    const callFetch = useCallback(\r\n        async ({callbackURL = url, fetchOptions = {}} = {}) => {\r\n            if (!callbackURL) return;\r\n            dispatch({type: 'SET_LOADING_ON'})\r\n            try {\r\n                const res = await fetch(callbackURL, fetchOptions);\r\n                const data = await res.json();\r\n                return { ok: true, data };\r\n            } catch (error) {\r\n                console.error(error);\r\n                return { ok: false, data: error };\r\n            } finally {\r\n                dispatch({type: 'SET_LOADING_OFF'})\r\n            }\r\n        },\r\n        [url, dispatch]\r\n    );\r\n\r\n    // The below state values and functions mostly apply for useEffect only.\r\n\r\n    // define response from fetch\r\n    const [response, setResponse] = useState({});\r\n    // Define a fetch index used for refetching.\r\n    const [fetchIndex, setFetchIndex] = useState(0);\r\n    const refetch = () => {\r\n        setFetchIndex(fetchIndex + 1);\r\n    };\r\n    // define a fetch function once component mounts if onEvent is false\r\n    useEffect(() => {\r\n        if (onEvent) return;\r\n        const fetchData = async () => {\r\n            if (!url) return;\r\n            dispatch({type: 'SET_LOADING_ON'})\r\n            try {\r\n                const res = await fetch(url);\r\n                const data = await res.json();\r\n                setResponse({ ok: true, data });\r\n            } catch (error) {\r\n                console.error(error);\r\n                setResponse({ ok: false, data: error });\r\n            } finally {\r\n                dispatch({type: 'SET_LOADING_OFF'})\r\n            }\r\n        };\r\n        fetchData();\r\n    }, [url, onEvent, fetchIndex, dispatch]);\r\n    // if onEvent is true, return the callback fetch function\r\n    if (onEvent) return callFetch;\r\n    // else return the response from useEffect function\r\n    return { response, refetch };\r\n}\r\n","import { useState } from \"react\";\r\nimport { useFetch } from \"../../../hooks/useFetch\";\r\n\r\n/**\r\n * @component\r\n * @param {string} privateKey the private key used to fetch the encrypted message\r\n * @param {function} setPrivateKey react useState hook that set's the private key\r\n * @param {function} setEncryptedMessage react useState hook that set's the encrypted message\r\n * @summary This component fetches the encrypted message using either the message ID or the\r\n * private key. The private key and encrypted message are neccessary in it's parent component\r\n * since it will be passed as a prop to it's sibling 'DecryptMessageSection' component, that is\r\n * why they are passed as a prop here.\r\n */\r\nexport default function GetMessageSection({privateKey, setPrivateKey, setEncryptedMessage}) {\r\n    const callFetch = useFetch({onEvent: true})\r\n    const [messageID, setMessageID] = useState('')\r\n\r\n    const handleMessageID = (e) => (setMessageID(e.target.value))\r\n    const handlePrivateKey = (e) => (setPrivateKey(e.target.value))\r\n\r\n    /**\r\n     * @async @param {string} identifier either the messageID or the private key. \r\n     * @summary helper function for fetching the encrypted message using the messageID or the private key\r\n     * @returns {void} set's state for encryptedMessage on success, returns a status regarding\r\n     * it's error on failure.\r\n     */\r\n    const fetchWith = async (identifier) => {\r\n        // If field is empty, return empty_field status\r\n        if (identifier.trim() === '') {\r\n            setEncryptedMessage('');\r\n            return { status: 'empty_field' };\r\n        }\r\n        const response = await callFetch({callbackURL: `/api/messages/${identifier}`});\r\n        // If JSON string does not match the below string, setState the encrypted\r\n        // message and return.\r\n        if (response.data !== 'Requested message does not exist in database') {\r\n            setEncryptedMessage(response.data.encryptedMessage);\r\n            return { status: 'found' };\r\n        } else {\r\n            setEncryptedMessage('');\r\n            return { status: 'not_found' };   \r\n        }\r\n    };\r\n\r\n    /**\r\n     * @async\r\n     * @summary handles fetching encrypted message once called through the onClick handler.\r\n     * @returns {void} set's state for encryptedMessage with an error string on failure. \r\n     */\r\n    const handleFetch = async () => {\r\n        // Attempt to fetch with message ID\r\n        const msgIdResponse = await fetchWith(messageID);\r\n        // If fetch is a success, return out of this function\r\n        if (msgIdResponse.status.match(/^(empty_field|not_found)$/) === null)\r\n            return;\r\n        // Else attempt to fetch with private key\r\n        const pkResponse = await fetchWith(privateKey);\r\n        // If fetch is a failure, return message not found field\r\n        if (pkResponse.status.match(/^(empty_field|not_found)$/) !== null)\r\n            return setEncryptedMessage(\r\n                'MESSAGE NOT FOUND please check your message ID or private key'\r\n            );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-4 row\">\r\n                <label\r\n                    htmlFor=\"inputMessageID\"\r\n                    className=\"col-sm-2 col-form-label\"\r\n                >\r\n                    Message ID\r\n                </label>\r\n                <div className=\"col-sm-10\">\r\n                    <input\r\n                        value={messageID}\r\n                        placeholder=\"Your message ID\"\r\n                        onChange={handleMessageID}\r\n                        className=\"form-control\"\r\n                        id=\"inputMessageID\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"mb-4 row\">\r\n                <label\r\n                    htmlFor=\"inputPrivateKey\"\r\n                    className=\"col-sm-2 col-form-label\"\r\n                >\r\n                    Private Key\r\n                </label>\r\n                <div className=\"col-sm-10\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        id=\"inputPrivateKey\"\r\n                        value={privateKey}\r\n                        placeholder=\"Your private key\"\r\n                        onChange={handlePrivateKey}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"mb-4 row\">\r\n                <div className=\"d-grid gap-2\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-info\"\r\n                        onClick={handleFetch}\r\n                    >\r\n                        Retrieve Message\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import { useState } from 'react';\r\nimport { useFetch } from '../../../hooks/useFetch';\r\n\r\n/**\r\n * @component DecryptMessageSection\r\n * @param {string} encryptedMessage the encrypted message to be decrypted\r\n * @param {function} setEncryptedMessage the setState hook that set's the encrypted message field\r\n * @param {string} privateKey the private key to decrypt the message with\r\n * @summary Decrypts an encrypted message using it's private key by sending a patch\r\n * request to the server with the key as its request's body.\r\n */\r\nexport default function DecryptMessageSection({\r\n    encryptedMessage,\r\n    setEncryptedMessage,\r\n    privateKey, \r\n}) {\r\n    // Define the fetch callback function\r\n    const callFetch = useFetch({ onEvent: true });\r\n    // Define state for setting the response received from fetch callback function\r\n    const [response, setResponse] = useState({});\r\n    /**\r\n     * @async\r\n     * @summary Handles the message decryption after it get's called with onClick handler.\r\n     * sends a request to the server to decrypt the message using it's private key in it's request\r\n     * body. Set's the response state and response itself is used to render the decrypted message text\r\n     * below.\r\n     */\r\n    const handleDecrypt = async () => {\r\n        const response = await callFetch({\r\n            callbackURL: '/api/messages/decrypt',\r\n            fetchOptions: {\r\n                method: 'PATCH',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    privateKey,\r\n                }),\r\n            },\r\n        });\r\n        setResponse(response);\r\n    };\r\n\r\n    const encryptedMessageHandler = (e) => (setEncryptedMessage(e.target.value))\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-4 row\">\r\n                <label\r\n                    htmlFor=\"inputEncryptedMessage\"\r\n                    className=\"col-sm-2 col-form-label\"\r\n                >\r\n                    Encrypted Message\r\n                </label>\r\n                <div className=\"col-sm-10\">\r\n                    <textarea\r\n                        id=\"inputEncryptedMessage\"\r\n                        className=\"form-control\"\r\n                        rows=\"5\"\r\n                        onChange = {encryptedMessageHandler}\r\n                        value={encryptedMessage}\r\n                        placeholder=\"Your encrypted message\"\r\n                    ></textarea>{' '}\r\n                </div>\r\n            </div>\r\n            <div className=\"mb-4 row\">\r\n                <div className=\"d-grid gap-2\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-danger\"\r\n                        onClick={handleDecrypt}\r\n                    >\r\n                        Decrypt Message\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"mb-4 row\">\r\n                <label className=\"col-sm-2 col-form-label\">\r\n                    Decrypted Message\r\n                </label>\r\n                <div className=\"col-sm-10\">\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        rows=\"5\"\r\n                        placeholder=\"Your decrypted message\"\r\n                        value={response.data && response.data.decryptedMessage}\r\n                        readOnly\r\n                    ></textarea>{' '}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from 'react';\r\nimport GetMessageSection from './GetMessageSection';\r\nimport DecryptMessageSection from './DecryptMessageSection';\r\n\r\n/**\r\n * @component\r\n * @summary Decrypt section\r\n */\r\nexport default function Decrypt() {\r\n    const [encryptedMessage, setEncryptedMessage] = useState('');\r\n    const [privateKey, setPrivateKey] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-6 mb-5\">Decrypt my message</h1>\r\n            <GetMessageSection\r\n                setEncryptedMessage={setEncryptedMessage}\r\n                privateKey={privateKey}\r\n                setPrivateKey={setPrivateKey}\r\n            />\r\n            <DecryptMessageSection\r\n                encryptedMessage={encryptedMessage}\r\n                setEncryptedMessage={setEncryptedMessage}\r\n                privateKey={privateKey}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import { useFetch } from \"../../../hooks/useFetch\";\r\n/**\r\n * @async @function copyToClipboard\r\n * @summary Copies data to the clipboard\r\n * @param {*} data data to be copied\r\n */\r\n const copyToClipBoard = async (data) => {\r\n    await navigator.clipboard.writeText(data);\r\n};\r\n\r\n/**\r\n * @component\r\n * @summary Private Key generator field\r\n * @param {object} pkResponse the private key response object containing the private key\r\n * @param {function} fetchPrivateKey callback function to fetch a private key\r\n */\r\nexport default function PrivateKeyGen({ privateKey, setPrivateKey }) {\r\n    // define the fetch callback function\r\n    const callFetch = useFetch({onEvent: true})\r\n\r\n    // define the privatekey handler\r\n    const handlePrivateKey = async () => {\r\n        const response = await callFetch({callbackURL: '/api/generate-key'})\r\n        setPrivateKey(response.data)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mb-4 row\">\r\n            <label className=\"col-sm-2 col-form-label\">Private Key</label>\r\n            <div className=\"col-lg-7\">\r\n                <input\r\n                    className=\"form-control\"\r\n                    value={privateKey}\r\n                    placeholder=\"Generate a private key for encryption\"\r\n                    readOnly\r\n                />\r\n            </div>\r\n            <div className=\"col-lg-1\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary\"\r\n                    onClick={() => copyToClipBoard(privateKey)}\r\n                >\r\n                    <i className=\"far fa-clipboard\"></i>\r\n                </button>\r\n            </div>\r\n            <div className=\"col-lg-2\">\r\n                <div className=\"d-grid gap-2\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary\"\r\n                        onClick={handlePrivateKey}\r\n                    >\r\n                        Generate\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport { useFetch } from '../../../hooks/useFetch';\r\nimport PrivateKeyGen from './PrivateKeyGen';\r\n\r\nexport function EncryptMessageSection({ privateKey, refetchMessages }) {\r\n    const [originalMessage, setOriginalMessage] = useState('');\r\n    const [encryptedMessage, setEncryptedMessage] = useState('');\r\n    const callFetch = useFetch({ onEvent: true });\r\n\r\n    const originalMessageHandler = (e) => setOriginalMessage(e.target.value);\r\n    const encryptMessageHandler = async () => {\r\n        const response = await callFetch({\r\n            callbackURL: '/api/messages',\r\n            fetchOptions: {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    authorization: `Bearer ${document.cookie.slice(11)} `,\r\n                },\r\n                body: JSON.stringify({\r\n                    originalMessage,\r\n                    privateKey,\r\n                }),\r\n            },\r\n        });\r\n        setEncryptedMessage(response.data.encryptedMessage)\r\n        refetchMessages()\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mb-4 row\">\r\n                <label\r\n                    htmlFor=\"inputMessage\"\r\n                    className=\"col-sm-2 col-form-label\"\r\n                    value={originalMessage}\r\n                >\r\n                    Your message\r\n                </label>\r\n                <div className=\"col-sm-10\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        id=\"inputMessage\"\r\n                        onChange={originalMessageHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"mb-4 row\">\r\n                <div className=\"d-grid gap-2\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-success\"\r\n                        onClick={encryptMessageHandler}\r\n                    >\r\n                        Submit / Encrypt\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"mb-4 row\">\r\n                <label className=\"col-sm-2 col-form-label\">\r\n                    Encrypted Message\r\n                </label>\r\n                <div className=\"col-sm-10\">\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        rows=\"5\"\r\n                        readOnly\r\n                        placeholder=\"Your message after submitting the encryption request...\"\r\n                        value={encryptedMessage}\r\n                    ></textarea>{' '}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n/**\r\n * @component\r\n * @summary Encryption section\r\n */\r\nexport default function Encrypt({ refetchMessages }) {\r\n    const [privateKey, setPrivateKey] = useState('');\r\n\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-6 mb-5\">Encrypt my message</h1>\r\n            <PrivateKeyGen\r\n                privateKey={privateKey}\r\n                setPrivateKey={setPrivateKey}\r\n            />\r\n            <EncryptMessageSection privateKey={privateKey} refetchMessages={refetchMessages} />\r\n        </div>\r\n    );\r\n}\r\n","export default function MessageLog({ messages }) {\r\n  return (\r\n    <div className = 'table-responsive' >\r\n      <h1 className=\"display-6 mb-5\">Messages Log</h1>\r\n      <table className=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\">ID</th>\r\n            <th scope=\"col\">Original Message</th>\r\n            <th scope=\"col\">Encrypted Message</th>\r\n            <th scope=\"col\">Private Key</th>\r\n            <th scope=\"col\">Date</th>\r\n            <th scope=\"col\">Time</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {\r\n            messages.data && messages.data.map((message, i) => {\r\n              return (\r\n                <tr key = {message.messageID} >\r\n                  <th scope=\"row\">{i+1}</th>\r\n                  <td>{message.messageID}</td>\r\n                  <td>{message.originalMessage}</td>\r\n                  <td>{message.encryptedMessage}</td>\r\n                  <td>{message.privateKey}</td>\r\n                  <td>{message.date}</td>\r\n                  <td>{message.time}</td>\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n","import \"./loading.css\"\r\n\r\nfunction Loading () {\r\n    return (\r\n      <div className=\"loading\"></div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import { useSelector } from 'react-redux';\r\nimport { useFetch } from './hooks/useFetch';\r\nimport Decrypt from './components/views/decrypt/Decrypt';\r\nimport Encrypt from './components/views/encrypt/Encrypt';\r\nimport MessageLog from './components/views/message_log/MessageLog';\r\nimport Loading from './components/helpers/loading/Loading';\r\n\r\nexport default function App() {\r\n    const loading = useSelector((state) => state.loading)\r\n    // Fetch all the existing messages.\r\n    const { response, refetch: refetchMessages } = useFetch({url: '/api/messages'})\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            {loading && <Loading />}\r\n            <div className=\"row justify-content-around mb-5\">\r\n                <div className=\"col-lg-5\">\r\n                    <Encrypt refetchMessages = {refetchMessages} />\r\n                </div>\r\n                <div className=\"col-lg-5\">\r\n                    <Decrypt />\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-11\">\r\n                    <MessageLog messages = {response} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { createStore } from 'redux'\n\nconst initialState = {\n    loading: false,\n};\n\n/**\n * @function reducer Used to toggle loading on and off globally in useFetch hook.\n */\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case 'SET_LOADING_ON':\n            return {\n                ...state,\n                loading: true,\n            };\n        case 'SET_LOADING_OFF':\n            return {\n                ...state,\n                loading: false,\n            };\n        default:\n            return state\n    }\n};\n\nexport const store = createStore(reducer)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux'\r\nimport { store } from \"./store\"\r\n \r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store} >\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}